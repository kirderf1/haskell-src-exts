{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module AltTyVarInExt where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()
import Control.Applicative (Alternative, empty)

data B composable_types_recursive_var = C deriving Functor

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.smartConstructors] [''B]
  )

class Composable_types_class_d f e where
        composable_types_class_function_d ::
                                            (Composable_types_class_d g e) =>
                                            f (Data.Comp.Term g) -> e

d :: (Composable_types_class_d g e) => Data.Comp.Term g -> e
d = composable_types_class_function_d . Data.Comp.unTerm

{-# NOINLINE d #-}

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.liftSum]
    [''Composable_types_class_d]
  )

instance (Alternative f) => Composable_types_class_d B (f g) where
        composable_types_class_function_d C = empty
