{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module CatCheckInDecl where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

class () => Composable_types_class_d f e where
        composable_types_class_function_d ::
                                            (Composable_types_class_d g e) =>
                                            f (Data.Comp.Term g) -> Data.Comp.Term e

d ::
    (Composable_types_class_d g e) =>
    Data.Comp.Term g -> Data.Comp.Term e
d = composable_types_class_function_d . Data.Comp.unTerm

{-# NOINLINE d #-}

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.liftSum]
    [''Composable_types_class_d]
  )
