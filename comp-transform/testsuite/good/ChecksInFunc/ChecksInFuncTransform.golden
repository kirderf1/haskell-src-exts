{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module ChecksInFunc where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()
import qualified ComposableTypes

data B composable_types_recursive_var = B

composable_types_constructor_B ::
                                 B Data.Comp.:<: g => Data.Comp.Term g
composable_types_constructor_B = Data.Comp.inject B

class Composable_types_inner_class_c f where
        composable_types_class_function_c ::
                                            (Composable_types_inner_class_c g) =>
                                            f (Data.Comp.Term g) -> ()

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.liftSum]
    [''Composable_types_inner_class_c]
  )

class Composable_types_outer_class_c t where
        c :: t -> ()

instance Composable_types_inner_class_c g =>
         Composable_types_outer_class_c (Data.Comp.Term g)
         where
        c = composable_types_class_function_c . Data.Comp.unTerm

d ::
    (B Data.Comp.:<: a, Composable_types_inner_class_c a) =>
    Data.Comp.Term a -> ((), Data.Comp.Term a)
d a = (c a, composable_types_constructor_B)
