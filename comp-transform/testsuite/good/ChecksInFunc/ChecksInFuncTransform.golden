{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module ChecksInFunc where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

data B composable_types_recursive_var = B deriving Functor

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.smartConstructors] [''B]
  )

class Composable_types_class_c f where
        composable_types_class_function_c ::
                                            (Composable_types_class_c g) =>
                                            f (Data.Comp.Term g) -> ()

c :: (Composable_types_class_c g) => Data.Comp.Term g -> ()
c = composable_types_class_function_c . Data.Comp.unTerm

{-# NOINLINE c #-}

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.liftSum]
    [''Composable_types_class_c]
  )

d ::
    (B Data.Comp.:<: a, Composable_types_class_c a) =>
    Data.Comp.Term a -> ((), Data.Comp.Term a)
d a = (c a, iB)
