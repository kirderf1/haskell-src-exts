{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
module Common where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

data Value a = Const Int
                 deriving Functor

$(
  Data.Comp.Derive.derive
    [Data.Comp.Derive.makeEqF, Data.Comp.Derive.makeShowF,
     Data.Comp.Derive.smartConstructors]
    [''Value]
  )

data Op a = Add a a
          | Mult a a
              deriving Functor

$(
  Data.Comp.Derive.derive
    [Data.Comp.Derive.makeEqF, Data.Comp.Derive.makeShowF,
     Data.Comp.Derive.smartConstructors]
    [''Op]
  )

type Sig = Data.Comp.Term (Value Data.Comp.:+: Op)
