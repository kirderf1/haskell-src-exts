{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
module ContextInExt where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

data B a = C a
             deriving Functor

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.smartConstructors] [''B]
  )

class D f where
        d' :: (D g) => f (Data.Comp.Term g) -> ()

d :: (D g) => Data.Comp.Term g -> ()
d = d' . Data.Comp.unTerm

{-# NOINLINE d #-}

$( Data.Comp.Derive.derive [Data.Comp.Derive.liftSum] [''D] )

instance forall e. D B where
        d' (C a) = d a
