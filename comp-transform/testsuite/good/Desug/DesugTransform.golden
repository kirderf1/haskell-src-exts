{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module Desug where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

data Value composable_types_recursive_var = Const Int
                                              deriving Functor

composable_types_constructor_Const ::
                                     Value Data.Comp.:<: g => Int -> Data.Comp.Term g
composable_types_constructor_Const arg_1
  = Data.Comp.inject (Const arg_1)

data Op composable_types_recursive_var = Add composable_types_recursive_var
                                             composable_types_recursive_var
                                       | Mult composable_types_recursive_var
                                              composable_types_recursive_var
                                           deriving Functor

composable_types_constructor_Add ::
                                   Op Data.Comp.:<: g =>
                                   Data.Comp.Term g -> Data.Comp.Term g -> Data.Comp.Term g
composable_types_constructor_Add arg_1 arg_2
  = Data.Comp.inject (Add arg_1 arg_2)

composable_types_constructor_Mult ::
                                    Op Data.Comp.:<: g =>
                                    Data.Comp.Term g -> Data.Comp.Term g -> Data.Comp.Term g
composable_types_constructor_Mult arg_1 arg_2
  = Data.Comp.inject (Mult arg_1 arg_2)

data Sugar composable_types_recursive_var = Neg composable_types_recursive_var
                                              deriving Functor

composable_types_constructor_Neg ::
                                   Sugar Data.Comp.:<: g => Data.Comp.Term g -> Data.Comp.Term g
composable_types_constructor_Neg arg_1
  = Data.Comp.inject (Neg arg_1)

type Sig = Data.Comp.Term (Value Data.Comp.:+: Op)

type Sig2 =
     Data.Comp.Term (Value Data.Comp.:+: Op Data.Comp.:+: Sugar)

class () => Composable_types_class_desug f a where
        composable_types_class_function_desug ::
                                                (Composable_types_class_desug g a) =>
                                                f (Data.Comp.Term g) -> Data.Comp.Term a

desug ::
        (Composable_types_class_desug g a) =>
        Data.Comp.Term g -> Data.Comp.Term a
desug = composable_types_class_function_desug . Data.Comp.unTerm

{-# NOINLINE desug #-}

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.liftSum]
    [''Composable_types_class_desug]
  )

instance Value Data.Comp.:<: a =>
         Composable_types_class_desug Value a
         where
        composable_types_class_function_desug (Const c)
          = composable_types_constructor_Const c

instance Op Data.Comp.:<: a => Composable_types_class_desug Op a
         where
        composable_types_class_function_desug (Add e1 e2)
          = composable_types_constructor_Add (desug e1) (desug e2)
        composable_types_class_function_desug (Mult e1 e2)
          = composable_types_constructor_Mult (desug e1) (desug e2)

instance (Value Data.Comp.:<: a, Op Data.Comp.:<: a) =>
         Composable_types_class_desug Sugar a
         where
        composable_types_class_function_desug (Neg e)
          = composable_types_constructor_Const (-1)
              `composable_types_constructor_Mult` (desug e)
