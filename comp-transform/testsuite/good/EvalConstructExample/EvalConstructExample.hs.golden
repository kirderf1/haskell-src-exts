{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
module EvalEx where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

data Value a = Const Int
                 deriving Functor

$(
  Data.Comp.Derive.derive
    [Data.Comp.Derive.makeTraversable, Data.Comp.Derive.makeFoldable,
     Data.Comp.Derive.makeEqF, Data.Comp.Derive.makeShowF,
     Data.Comp.Derive.smartConstructors,
     Data.Comp.Derive.smartAConstructors]
    [''Value]
  )

data Op a = Add a a
          | Mult a a
              deriving Functor

$(
  Data.Comp.Derive.derive
    [Data.Comp.Derive.makeTraversable, Data.Comp.Derive.makeFoldable,
     Data.Comp.Derive.makeEqF, Data.Comp.Derive.makeShowF,
     Data.Comp.Derive.smartConstructors,
     Data.Comp.Derive.smartAConstructors]
    [''Op]
  )

type Sig = Data.Comp.Term (Value Data.Comp.:+: Op)

class Eval f where
        eval' :: (Eval g) => f (Data.Comp.Term g) -> Int

eval :: (Eval g) => Data.Comp.Term g -> Int
eval = eval' . Data.Comp.unTerm

{-# NOINLINE eval #-}

$( Data.Comp.Derive.derive [Data.Comp.Derive.liftSum] [''Eval] )

instance Eval Value where
        eval' (Const i) = i

instance Eval Op where
        eval' (Add e1 e2) = eval e1 + eval e2
        eval' (Mult e1 e2) = eval e1 * eval e2

evalEx :: Int
evalEx = eval ((Data.Comp.inject . Add) ((Data.Comp.inject . Const) 1) ((Data.Comp.inject . Mult) ((Data.Comp.inject . Const) 2) ((Data.Comp.inject . Const) 2)) :: Sig)
