{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module EvalConstructExample where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()
import qualified ComposableTypes

data Value composable_types_recursive_var = Const Int

composable_types_constructor_Const ::
                                     Value Data.Comp.:<: g => Int -> Data.Comp.Term g
composable_types_constructor_Const arg_1
  = Data.Comp.inject (Const arg_1)

data Op composable_types_recursive_var = Add composable_types_recursive_var
                                             composable_types_recursive_var
                                       | Mult composable_types_recursive_var
                                              composable_types_recursive_var

composable_types_constructor_Add ::
                                   Op Data.Comp.:<: g =>
                                   Data.Comp.Term g -> Data.Comp.Term g -> Data.Comp.Term g
composable_types_constructor_Add arg_1 arg_2
  = Data.Comp.inject (Add arg_1 arg_2)

composable_types_constructor_Mult ::
                                    Op Data.Comp.:<: g =>
                                    Data.Comp.Term g -> Data.Comp.Term g -> Data.Comp.Term g
composable_types_constructor_Mult arg_1 arg_2
  = Data.Comp.inject (Mult arg_1 arg_2)

type Sig = Data.Comp.Term (Value Data.Comp.:+: Op)

class Composable_types_class_eval f where
        composable_types_class_function_eval ::
                                               (Composable_types_class_eval g) =>
                                               f (Data.Comp.Term g) -> Int

eval :: (Composable_types_class_eval g) => Data.Comp.Term g -> Int
eval = composable_types_class_function_eval . Data.Comp.unTerm

{-# NOINLINE eval #-}

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.liftSum]
    [''Composable_types_class_eval]
  )

instance Composable_types_class_eval Value where
        composable_types_class_function_eval (Const i) = i

instance Composable_types_class_eval Op where
        composable_types_class_function_eval (Add e1 e2)
          = eval e1 + eval e2
        composable_types_class_function_eval (Mult e1 e2)
          = eval e1 * eval e2

evalEx :: Int
evalEx
  = eval
      (composable_types_constructor_Const 1
         `composable_types_constructor_Add`
         (composable_types_constructor_Const 2
            `composable_types_constructor_Mult`
            composable_types_constructor_Const 2)
         :: Sig)
