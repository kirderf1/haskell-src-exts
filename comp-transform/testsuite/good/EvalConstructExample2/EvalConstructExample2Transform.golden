{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module EvalConstructExample2 where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

data Value composable_types_recursive_var = Const Int
                                              deriving Functor

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.smartConstructors]
    [''Value]
  )

data Op composable_types_recursive_var = Add composable_types_recursive_var
                                             composable_types_recursive_var
                                       | Mult composable_types_recursive_var
                                              composable_types_recursive_var
                                           deriving Functor

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.smartConstructors] [''Op]
  )

type Sig = Data.Comp.Term (Value Data.Comp.:+: Op)

class Composable_types_class_eval f where
        composable_types_class_function_eval ::
                                               (Composable_types_class_eval g) =>
                                               f (Data.Comp.Term g) -> Int

eval :: (Composable_types_class_eval g) => Data.Comp.Term g -> Int
eval = composable_types_class_function_eval . Data.Comp.unTerm

{-# NOINLINE eval #-}

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.liftSum]
    [''Composable_types_class_eval]
  )

instance Composable_types_class_eval Value where
        composable_types_class_function_eval (Const i) = i

instance Composable_types_class_eval Op where
        composable_types_class_function_eval (Add e1 e2)
          = eval e1 + eval e2
        composable_types_class_function_eval (Mult e1 e2)
          = eval e1 * eval e2

evalEx :: Int
evalEx = eval (expr :: Sig)

expr ::
       (Value Data.Comp.:<: a, Op Data.Comp.:<: a) => Data.Comp.Term a
expr = iConst 1 `iAdd` (iConst 2 `iMult` iConst 2)
