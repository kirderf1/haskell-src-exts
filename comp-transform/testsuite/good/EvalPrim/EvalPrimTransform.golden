{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module EvalPrim where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()
import qualified ComposableTypes

class Composable_types_class_eval f where
        composable_types_class_function_eval ::
                                               (Composable_types_class_eval g) =>
                                               f (Data.Comp.Term g) -> Bool -> String

eval ::
       (Composable_types_class_eval g) =>
       Data.Comp.Term g -> Bool -> String
eval = composable_types_class_function_eval . Data.Comp.unTerm

{-# NOINLINE eval #-}

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.liftSum]
    [''Composable_types_class_eval]
  )

eval2 ::
        Composable_types_class_eval a => Data.Comp.Term a -> String
eval2 a = eval a False
