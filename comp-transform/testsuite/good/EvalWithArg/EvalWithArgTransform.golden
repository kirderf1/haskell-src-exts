{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module EvalWithArg where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()
import qualified ComposableTypes

data B composable_types_recursive_var = C Int
                                      | D composable_types_recursive_var

composable_types_constructor_C ::
                                 B Data.Comp.:<: g => Int -> Data.Comp.Term g
composable_types_constructor_C arg_1 = Data.Comp.inject (C arg_1)

composable_types_constructor_D ::
                                 B Data.Comp.:<: g => Data.Comp.Term g -> Data.Comp.Term g
composable_types_constructor_D arg_1 = Data.Comp.inject (D arg_1)

class Composable_types_class_eval f where
        composable_types_class_function_eval ::
                                               (Composable_types_class_eval g) =>
                                               f (Data.Comp.Term g) -> Bool -> Int

eval ::
       (Composable_types_class_eval g) => Data.Comp.Term g -> Bool -> Int
eval = composable_types_class_function_eval . Data.Comp.unTerm

{-# NOINLINE eval #-}

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.liftSum]
    [''Composable_types_class_eval]
  )

instance Composable_types_class_eval B where
        composable_types_class_function_eval (D a) True = -eval a False
        composable_types_class_function_eval (D a) False = eval a True
        composable_types_class_function_eval (C i) _ = i
