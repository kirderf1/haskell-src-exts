{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

data B composable_types_recursive_var = C Int
                                      | D composable_types_recursive_var
                                          deriving Functor

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.smartConstructors] [''B]
  )

class Eval f where
        eval' :: (Eval g) => f (Data.Comp.Term g) -> Bool -> Int

eval :: (Eval g) => Data.Comp.Term g -> Bool -> Int
eval = eval' . Data.Comp.unTerm

{-# NOINLINE eval #-}

$( Data.Comp.Derive.derive [Data.Comp.Derive.liftSum] [''Eval] )

instance Eval B where
        eval' (D a) True = -eval a False
        eval' (D a) False = eval a True
        eval' (C i) _ = i
main = putStrLn $ "Det funkar!"
