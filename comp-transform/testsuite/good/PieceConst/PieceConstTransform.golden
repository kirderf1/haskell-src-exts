{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module PieceConst where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

data Value composable_types_recursive_var = Const Int
                                              deriving Functor

composable_types_constructor_Const ::
                                     Value Data.Comp.:<: g => Int -> Data.Comp.Term g
composable_types_constructor_Const arg_1
  = Data.Comp.inject (Const arg_1)
