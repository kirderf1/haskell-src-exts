{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module PieceConstrInSection where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()
import qualified ComposableTypes

data B composable_types_recursive_var = B Bool Bool

composable_types_constructor_B ::
                                 B Data.Comp.:<: g => Bool -> Bool -> Data.Comp.Term g
composable_types_constructor_B arg_1 arg_2
  = Data.Comp.inject (B arg_1 arg_2)

c :: Data.Comp.Term (B)
c = (`composable_types_constructor_B` True) False

d :: Data.Comp.Term (B)
d = (True `composable_types_constructor_B`) False
