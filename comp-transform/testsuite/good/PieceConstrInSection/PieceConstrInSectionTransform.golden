{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
module PieceConstrInSection where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

data B composable_types_recursive_var = B Bool Bool deriving Functor

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.smartConstructors] [''Op]
  )

c :: Term B
c = (`iB` True) False
d :: Term B
d = (True `iB`) False
