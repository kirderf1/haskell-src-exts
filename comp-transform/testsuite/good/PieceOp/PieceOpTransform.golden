{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
module PieceOp where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

data Op a = Add a a
          | Mult a a
              deriving Functor

$(
  Data.Comp.Derive.derive
    [Data.Comp.Derive.makeTraversable, Data.Comp.Derive.makeFoldable,
     Data.Comp.Derive.makeEqF, Data.Comp.Derive.makeShowF,
     Data.Comp.Derive.smartConstructors,
     Data.Comp.Derive.smartAConstructors]
    [''Op]
  )
