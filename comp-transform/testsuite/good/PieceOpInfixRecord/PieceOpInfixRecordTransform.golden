{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module PieceOpInfixRecord where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

data Op composable_types_recursive_var = composable_types_recursive_var
                                           `Add` composable_types_recursive_var
                                       | composable_types_recursive_var `Mult`
                                           composable_types_recursive_var

composable_types_constructor_Add ::
                                   Op Data.Comp.:<: g =>
                                   Data.Comp.Term g -> Data.Comp.Term g -> Data.Comp.Term g
composable_types_constructor_Add arg_1 arg_2
  = Data.Comp.inject (Add arg_1 arg_2)

composable_types_constructor_Mult ::
                                    Op Data.Comp.:<: g =>
                                    Data.Comp.Term g -> Data.Comp.Term g -> Data.Comp.Term g
composable_types_constructor_Mult arg_1 arg_2
  = Data.Comp.inject (Mult arg_1 arg_2)

data A composable_types_recursive_var = B{c ::
                                          composable_types_recursive_var,
                                          d :: Int}

composable_types_constructor_B ::
                                 A Data.Comp.:<: g => Data.Comp.Term g -> Int -> Data.Comp.Term g
composable_types_constructor_B arg_1 arg_2
  = Data.Comp.inject (B arg_1 arg_2)
