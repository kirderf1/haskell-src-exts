{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module SingletonPieceConstr where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

data B composable_types_recursive_var = B

composable_types_constructor_B ::
                                 B Data.Comp.:<: g => Data.Comp.Term g
composable_types_constructor_B = Data.Comp.inject B

c :: Data.Comp.Term (B)
c = composable_types_constructor_B
