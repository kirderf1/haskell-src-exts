{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module TransforativeTwoCategories where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

data Value composable_types_recursive_var = Const Int
                                              deriving Functor

composable_types_constructor_Const ::
                                     Value Data.Comp.:<: g => Int -> Data.Comp.Term g
composable_types_constructor_Const arg_1
  = Data.Comp.inject (Const arg_1)

data Op composable_types_recursive_var = Add composable_types_recursive_var
                                             composable_types_recursive_var
                                       | Mult composable_types_recursive_var
                                              composable_types_recursive_var
                                           deriving Functor

composable_types_constructor_Add ::
                                   Op Data.Comp.:<: g =>
                                   Data.Comp.Term g -> Data.Comp.Term g -> Data.Comp.Term g
composable_types_constructor_Add arg_1 arg_2
  = Data.Comp.inject (Add arg_1 arg_2)

composable_types_constructor_Mult ::
                                    Op Data.Comp.:<: g =>
                                    Data.Comp.Term g -> Data.Comp.Term g -> Data.Comp.Term g
composable_types_constructor_Mult arg_1 arg_2
  = Data.Comp.inject (Mult arg_1 arg_2)

type Sig = Data.Comp.Term (Value Data.Comp.:+: Op)

data T composable_types_recursive_var = T String
                                          deriving Functor

composable_types_constructor_T ::
                                 T Data.Comp.:<: g => String -> Data.Comp.Term g
composable_types_constructor_T arg_1 = Data.Comp.inject (T arg_1)

data T2 composable_types_recursive_var = T2 composable_types_recursive_var
                                            String composable_types_recursive_var
                                           deriving Functor

composable_types_constructor_T2 ::
                                  T2 Data.Comp.:<: g =>
                                  Data.Comp.Term g -> String -> Data.Comp.Term g -> Data.Comp.Term g
composable_types_constructor_T2 arg_1 arg_2 arg_3
  = Data.Comp.inject (T2 arg_1 arg_2 arg_3)

class () => Composable_types_class_transform f a where
        composable_types_class_function_transform ::
                                                    (Composable_types_class_transform g a) =>
                                                    f (Data.Comp.Term g) -> Data.Comp.Term a

transform ::
            (Composable_types_class_transform g a) =>
            Data.Comp.Term g -> Data.Comp.Term a
transform
  = composable_types_class_function_transform . Data.Comp.unTerm

{-# NOINLINE transform #-}

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.liftSum]
    [''Composable_types_class_transform]
  )

instance T Data.Comp.:<: a =>
         Composable_types_class_transform Value a
         where
        composable_types_class_function_transform (Const c)
          = composable_types_constructor_T $ show c

instance T2 Data.Comp.:<: a =>
         Composable_types_class_transform Op a
         where
        composable_types_class_function_transform (Add e1 e2)
          = composable_types_constructor_T2 (transform e1) "+" (transform e2)
        composable_types_class_function_transform (Mult e1 e2)
          = composable_types_constructor_T2 (transform e1) "*" (transform e2)
