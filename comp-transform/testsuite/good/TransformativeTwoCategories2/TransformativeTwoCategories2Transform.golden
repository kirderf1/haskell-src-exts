{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module TransforativeTwoCategories2 where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

data Value composable_types_recursive_var = Const Int
                                              deriving Functor

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.smartConstructors]
    [''Value]
  )

data Op composable_types_recursive_var = Add composable_types_recursive_var
                                             composable_types_recursive_var
                                       | Mult composable_types_recursive_var
                                              composable_types_recursive_var
                                           deriving Functor

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.smartConstructors] [''Op]
  )

data PairOp composable_types_recursive_var = Fst composable_types_recursive_var
                                                 composable_types_recursive_var
                                           | Snd composable_types_recursive_var
                                                 composable_types_recursive_var
                                           | Double composable_types_recursive_var
                                               deriving Functor

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.smartConstructors]
    [''PairOp]
  )

type Sig =
     Data.Comp.Term (Value Data.Comp.:+: Op Data.Comp.:+: PairOp)

data T composable_types_recursive_var = T String
                                          deriving Functor

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.smartConstructors] [''T]
  )

data T2 composable_types_recursive_var = T2 composable_types_recursive_var
                                            String composable_types_recursive_var
                                           deriving Functor

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.smartConstructors] [''T2]
  )

data T3 composable_types_recursive_var = T3 composable_types_recursive_var
                                           deriving Functor

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.smartConstructors] [''T3]
  )

class () => Composable_types_class_transform f a where
        composable_types_class_function_transform ::
                                                    (Composable_types_class_transform g a) =>
                                                    f (Data.Comp.Term g) -> Data.Comp.Term a

transform ::
            (Composable_types_class_transform g a) =>
            Data.Comp.Term g -> Data.Comp.Term a
transform
  = composable_types_class_function_transform . Data.Comp.unTerm

{-# NOINLINE transform #-}

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.liftSum]
    [''Composable_types_class_transform]
  )

instance T Data.Comp.:<: a =>
         Composable_types_class_transform Value a
         where
        composable_types_class_function_transform (Const c) = iT $ show c

instance T2 Data.Comp.:<: a =>
         Composable_types_class_transform Op a
         where
        composable_types_class_function_transform (Add e1 e2)
          = iT2 (transform e1) "+" (transform e2)
        composable_types_class_function_transform (Mult e1 e2)
          = iT2 (transform e1) "*" (transform e2)

instance (T3 Data.Comp.:<: a, T2 Data.Comp.:<: a) =>
         Composable_types_class_transform PairOp a
         where
        composable_types_class_function_transform (Fst e1 e2)
          = iT3 (transform e1)
        composable_types_class_function_transform (Snd e1 e2)
          = iT3 (transform e2)
        composable_types_class_function_transform (Double e)
          = iT2 (transform e) "+" (transform e)
