{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module VarTwiceInDecl where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()

data B composable_types_recursive_var = C

composable_types_constructor_C ::
                                 B Data.Comp.:<: g => Data.Comp.Term g
composable_types_constructor_C = Data.Comp.inject C

class Composable_types_class_d f e where
        composable_types_class_function_d ::
                                            (Composable_types_class_d g e) =>
                                            f (Data.Comp.Term g) -> (e, e)

d :: (Composable_types_class_d g e) => Data.Comp.Term g -> (e, e)
d = composable_types_class_function_d . Data.Comp.unTerm

{-# NOINLINE d #-}

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.liftSum]
    [''Composable_types_class_d]
  )
