{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
module Main where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified Data.Comp.Show ()
import qualified Data.Comp.Equality ()
import Common

class Eval f where
        eval' :: (Eval g) => Expr -> Int

eval :: (Eval g) => Expr -> Int
eval = eval' . Data.Comp.unTerm

{-# NOINLINE eval #-}

$( Data.Comp.Derive.derive [Data.Comp.Derive.liftSum] [''Eval] )

instance Eval Value where
        eval' (Const i) = i

instance Eval Op where
        eval' (Add e1 e2) = eval e1 + eval e2
        eval' (Mult e1 e2) = eval e1 * eval e2
